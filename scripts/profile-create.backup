#!/bin/bash

##############################################
# VPN Multi-Profile System
# Profile Creation Script with CLI Semi-GUI
##############################################

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m'

# Base directory
BASE_DIR="/opt/vpn-multi"
PROFILES_DIR="$BASE_DIR/profiles"
DOCKER_BASE="$BASE_DIR/docker-base"
HISTORY_FILE="$BASE_DIR/history.md"

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}Error: This script must be run as root!${NC}"
    exit 1
fi

# Function: Check if port is available
check_port_available() {
    local port=$1
    if ss -tuln | grep -q ":${port} "; then
        return 1
    else
        return 0
    fi
}

# Function: Get next available SSH port
get_next_ssh_port() {
    for port in {2200..2222}; do
        if check_port_available $port; then
            echo $port
            return 0
        fi
    done
    echo ""
    return 1
}

# Function: Validate domain format
validate_domain() {
    local domain=$1
    if [[ $domain =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function: Check if profile name exists
profile_exists() {
    local name=$1
    if [ -d "$PROFILES_DIR/$name" ]; then
        return 0
    else
        return 1
    fi
}

# Function: Log to history.md
log_history() {
    local user_request="$1"
    local action="$2"
    local ai_response="$3"
    local status="$4"

    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")

    cat >> "$HISTORY_FILE" << EOF

## $timestamp

**User Request:**
> $user_request

**Action:**
$action

**AI Response:**
$ai_response

**Status:** $status

---
EOF
}

# Clear screen and show header
clear
echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║                                                      ║${NC}"
echo -e "${CYAN}║          CREATE NEW VPN PROFILE                      ║${NC}"
echo -e "${CYAN}║                                                      ║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
echo ""

# Input: Profile Name
while true; do
    read -p "$(echo -e ${YELLOW}Profile Name${NC}): " profile_name

    # Validate not empty
    if [ -z "$profile_name" ]; then
        echo -e "${RED}Error: Profile name cannot be empty!${NC}"
        continue
    fi

    # Validate alphanumeric
    if ! [[ "$profile_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo -e "${RED}Error: Profile name can only contain letters, numbers, underscore, and dash!${NC}"
        continue
    fi

    # Check if exists
    if profile_exists "$profile_name"; then
        echo -e "${RED}Error: Profile '$profile_name' already exists!${NC}"
        continue
    fi

    break
done

# Input: Domain
while true; do
    read -p "$(echo -e ${YELLOW}Domain${NC}): " domain

    if [ -z "$domain" ]; then
        echo -e "${RED}Error: Domain cannot be empty!${NC}"
        continue
    fi

    if ! validate_domain "$domain"; then
        echo -e "${RED}Error: Invalid domain format!${NC}"
        continue
    fi

    break
done

# Input: CPU (%)
while true; do
    read -p "$(echo -e ${YELLOW}CPU \(%\)${NC}): " cpu_percent

    if [ -z "$cpu_percent" ]; then
        echo -e "${RED}Error: CPU cannot be empty!${NC}"
        continue
    fi

    if ! [[ "$cpu_percent" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}Error: CPU must be a number!${NC}"
        continue
    fi

    if [ "$cpu_percent" -lt 25 ] || [ "$cpu_percent" -gt 400 ]; then
        echo -e "${RED}Error: CPU must be between 25-400%!${NC}"
        continue
    fi

    break
done

# Calculate CPU quota (for Docker)
cpu_quota=$((cpu_percent * 1000))

# Input: RAM (MB)
while true; do
    read -p "$(echo -e ${YELLOW}RAM \(MB\)${NC}): " ram_mb

    if [ -z "$ram_mb" ]; then
        echo -e "${RED}Error: RAM cannot be empty!${NC}"
        continue
    fi

    if ! [[ "$ram_mb" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}Error: RAM must be a number!${NC}"
        continue
    fi

    if [ "$ram_mb" -lt 128 ] || [ "$ram_mb" -gt 4096 ]; then
        echo -e "${RED}Error: RAM must be between 128-4096 MB!${NC}"
        continue
    fi

    break
done

# Input: SSH Port (with auto-suggest)
suggested_port=$(get_next_ssh_port)
if [ -z "$suggested_port" ]; then
    echo -e "${RED}Error: No available SSH ports in range 2200-2222!${NC}"
    exit 1
fi

while true; do
    read -p "$(echo -e ${YELLOW}Port SSH${NC}) [${GREEN}${suggested_port}${NC}]: " ssh_port

    # Use suggested if empty
    if [ -z "$ssh_port" ]; then
        ssh_port=$suggested_port
    fi

    # Validate number
    if ! [[ "$ssh_port" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}Error: Port must be a number!${NC}"
        continue
    fi

    # Validate range
    if [ "$ssh_port" -lt 2200 ] || [ "$ssh_port" -gt 2222 ]; then
        echo -e "${RED}Error: Port must be between 2200-2222!${NC}"
        continue
    fi

    # Check availability
    if ! check_port_available "$ssh_port"; then
        echo -e "${RED}Error: Port $ssh_port is already in use!${NC}"
        continue
    fi

    break
done

# Input: Restore Link (optional)
read -p "$(echo -e ${YELLOW}Restore Link${NC}) [optional]: " restore_link

# Show confirmation
echo ""
echo -e "${CYAN}══════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}Profile yang akan dibuat:${NC}"
echo -e "${CYAN}══════════════════════════════════════════════════════${NC}"
echo -e "Nama          : ${YELLOW}$profile_name${NC}"
echo -e "Domain        : ${YELLOW}$domain${NC}"
echo -e "CPU           : ${YELLOW}${cpu_percent}%${NC}"
echo -e "RAM           : ${YELLOW}${ram_mb}MB${NC}"
echo -e "Port SSH      : ${YELLOW}$ssh_port${NC}"
if [ -n "$restore_link" ]; then
    echo -e "Restore link  : ${YELLOW}$restore_link${NC}"
else
    echo -e "Restore link  : ${YELLOW}(Fresh install)${NC}"
fi
echo -e "${CYAN}══════════════════════════════════════════════════════${NC}"
echo ""

# Confirmation
while true; do
    read -p "$(echo -e ${GREEN}Apakah yakin create profile baru? \[Y/N\]${NC}): " confirm
    case $confirm in
        [Yy]* ) break;;
        [Nn]* ) echo -e "${RED}Operation cancelled.${NC}"; exit 0;;
        * ) echo -e "${RED}Please answer Y or N.${NC}";;
    esac
done

# Start creation
echo ""
echo -e "${CYAN}Creating profile '$profile_name'...${NC}"
echo ""

# Create profile directory
mkdir -p "$PROFILES_DIR/$profile_name"

# Save profile metadata
cat > "$PROFILES_DIR/$profile_name/profile.conf" <<EOF
PROFILE_NAME="$profile_name"
DOMAIN="$domain"
CPU_PERCENT="$cpu_percent"
CPU_QUOTA="$cpu_quota"
RAM_MB="$ram_mb"
SSH_PORT="$ssh_port"
CREATED_AT="$(date +"%Y-%m-%d %H:%M:%S")"
EOF

# Download and extract backup if provided
if [ -n "$restore_link" ]; then
    echo -e "${YELLOW}[1/7] Downloading backup from restore link...${NC}"

    backup_file="$PROFILES_DIR/$profile_name/backup_restore.tar.gz"
    if wget -q --show-progress -O "$backup_file" "$restore_link"; then
        echo -e "${GREEN}Download successful!${NC}"

        # Extract backup
        echo -e "${YELLOW}[2/7] Extracting backup...${NC}"
        tar -xzf "$backup_file" -C "$PROFILES_DIR/$profile_name/" 2>/dev/null || unzip -q "$backup_file" -d "$PROFILES_DIR/$profile_name/" 2>/dev/null

        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Backup extracted successfully!${NC}"
        else
            echo -e "${RED}Failed to extract backup! Continuing with fresh install...${NC}"
        fi

        rm -f "$backup_file"
    else
        echo -e "${RED}Failed to download backup! Continuing with fresh install...${NC}"
    fi
else
    echo -e "${YELLOW}[1/7] No restore link provided, proceeding with fresh install...${NC}"
fi

# Create Xray config
echo -e "${YELLOW}[3/7] Creating Xray configuration...${NC}"
cat > "$PROFILES_DIR/$profile_name/config.json" <<'EOFCONFIG'
{
  "log": {
    "loglevel": "warning",
    "error": "/var/log/xray/error.log",
    "access": "/var/log/xray/access.log"
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 10001,
      "protocol": "vless",
      "settings": {
        "decryption": "none",
        "clients": [
          {
            "id": "placeholder-uuid"
#vless
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/vless"
        }
      }
    },
    {
      "listen": "0.0.0.0",
      "port": 10002,
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "placeholder-uuid",
            "alterId": 0
#vmess
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/vmess"
        }
      }
    },
    {
      "listen": "0.0.0.0",
      "port": 10003,
      "protocol": "trojan",
      "settings": {
        "decryption": "none",
        "clients": [
          {
            "password": "placeholder-password"
#trojanws
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/trojan-ws"
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIP"
      },
      "tag": "direct"
    }
  ]
}
EOFCONFIG

echo "$domain" > "$PROFILES_DIR/$profile_name/domain.txt"
echo -e "${GREEN}Xray configuration created!${NC}"

# Create Docker Compose file
echo -e "${YELLOW}[4/7] Creating Docker Compose configuration...${NC}"
cat > "$PROFILES_DIR/$profile_name/docker-compose.yml" <<EOFDOCKER
version: '3.8'

services:
  vpn-${profile_name}:
    build: ${DOCKER_BASE}
    container_name: vpn-${profile_name}
    hostname: ${profile_name}
    restart: unless-stopped
    ports:
      - "${ssh_port}:22"
      - "10101:10001"
      - "10102:10002"
      - "10103:10003"
    volumes:
      - ${PROFILES_DIR}/${profile_name}/config.json:/etc/xray/config.json
      - ${PROFILES_DIR}/${profile_name}/domain.txt:/etc/xray/domain
      - ${PROFILES_DIR}/${profile_name}/logs:/var/log/xray
    deploy:
      resources:
        limits:
          cpus: '$(awk "BEGIN {print $cpu_percent/100}")'
          memory: ${ram_mb}M
    networks:
      - vpn-network

networks:
  vpn-network:
    driver: bridge
EOFDOCKER

echo -e "${GREEN}Docker Compose configuration created!${NC}"

# Build and start container
echo -e "${YELLOW}[5/7] Building Docker image (this may take a few minutes)...${NC}"
cd "$PROFILES_DIR/$profile_name"
docker-compose build --quiet

echo -e "${YELLOW}[6/7] Starting container...${NC}"
docker-compose up -d

# Wait for container to be ready
sleep 5

# Setup SSL certificate
echo -e "${YELLOW}[7/7] Setting up SSL certificate...${NC}"
docker exec vpn-${profile_name} bash -c "
    systemctl stop nginx 2>/dev/null || true
    curl -s https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256
    /root/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    chmod 600 /etc/xray/xray.key /etc/xray/xray.crt
" 2>/dev/null

# Success message
clear
echo -e "${GREEN}╔══════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                                                      ║${NC}"
echo -e "${GREEN}║         PROFILE CREATED SUCCESSFULLY!                ║${NC}"
echo -e "${GREEN}║                                                      ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${CYAN}Profile Information:${NC}"
echo -e "  Name          : ${YELLOW}$profile_name${NC}"
echo -e "  Domain        : ${YELLOW}$domain${NC}"
echo -e "  CPU Limit     : ${YELLOW}${cpu_percent}%${NC}"
echo -e "  RAM Limit     : ${YELLOW}${ram_mb}MB${NC}"
echo -e "  SSH Port      : ${YELLOW}$ssh_port${NC}"
echo -e "  Container     : ${YELLOW}vpn-${profile_name}${NC}"
echo ""
echo -e "${CYAN}Access Information:${NC}"
echo -e "  SSH Access    : ${YELLOW}ssh root@$(hostname -I | awk '{print $1}') -p $ssh_port${NC}"
echo -e "  SSH Password  : ${YELLOW}vpnprofile${NC}"
echo ""
echo -e "${CYAN}Management Commands:${NC}"
echo -e "  View logs     : ${YELLOW}docker logs vpn-${profile_name}${NC}"
echo -e "  Stop profile  : ${YELLOW}cd $PROFILES_DIR/$profile_name && docker-compose stop${NC}"
echo -e "  Start profile : ${YELLOW}cd $PROFILES_DIR/$profile_name && docker-compose start${NC}"
echo -e "  SSH to profile: ${YELLOW}ssh root@localhost -p $ssh_port${NC}"
echo ""
echo -e "${GREEN}══════════════════════════════════════════════════════${NC}"

# Log to history
log_history \
    "Create profile '$profile_name' with domain $domain, CPU ${cpu_percent}%, RAM ${ram_mb}MB, SSH port $ssh_port" \
    "- Created profile directory: $PROFILES_DIR/$profile_name
- Generated Xray configuration
- Created Docker Compose file
- Built and started Docker container
- Setup SSL certificate for $domain" \
    "Profile '$profile_name' berhasil dibuat dengan:
- Domain: $domain
- CPU: ${cpu_percent}% ($(awk "BEGIN {print $cpu_percent/100}") cores)
- RAM: ${ram_mb}MB
- SSH Port: $ssh_port
- Container: vpn-${profile_name}
User dapat SSH ke profile dengan: ssh root@\$(hostname -I | awk '{print \$1}') -p $ssh_port" \
    "✅ Success"

echo ""
echo -e "${YELLOW}Profile creation completed!${NC}"
