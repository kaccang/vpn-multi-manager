#!/bin/bash

##############################################
# VPN Multi-Profile System
# Dual Backup Script (rclone + S3)
# Supports: Per-Profile & Global Backup
##############################################

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

BASE_DIR="/opt/vpn-multi"
PROFILES_DIR="$BASE_DIR/profiles"
BACKUP_DIR="$BASE_DIR/backups"
ENV_FILE="$BASE_DIR/.env"

# Load environment
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
else
    echo -e "${RED}Error: .env file not found!${NC}"
    echo "Copy .env.example to .env and configure it."
    exit 1
fi

# Function: Create backup archive
create_backup() {
    local source_dir="$1"
    local backup_name="$2"
    local backup_file="$BACKUP_DIR/tmp/${backup_name}.tar.gz"

    mkdir -p "$BACKUP_DIR/tmp"

    # Create tar.gz
    tar -czf "$backup_file" -C "$(dirname $source_dir)" "$(basename $source_dir)" 2>/dev/null

    if [ $? -eq 0 ]; then
        echo "$backup_file"
        return 0
    else
        echo ""
        return 1
    fi
}

# Function: Encrypt backup (optional)
encrypt_backup() {
    local backup_file="$1"
    local encrypted_file="${backup_file}.enc"

    if [ "$BACKUP_ENCRYPTION_ENABLED" == "true" ]; then
        if [ -z "$BACKUP_ENCRYPTION_PASSWORD" ]; then
            echo -e "${YELLOW}⚠ Encryption enabled but no password set, skipping encryption${NC}" >&2
            echo "$backup_file"
            return 0
        fi

        echo -e "  Encrypting with AES-256..." >&2
        # Use pbkdf2 for better security
        if openssl enc -aes-256-cbc -pbkdf2 -salt -in "$backup_file" -out "$encrypted_file" -k "$BACKUP_ENCRYPTION_PASSWORD" 2>/dev/null; then
            rm "$backup_file"
            echo -e "  ${GREEN}✓ Encrypted successfully${NC}" >&2
            echo "$encrypted_file"
            return 0
        else
            echo -e "  ${RED}✗ Encryption failed, using unencrypted backup${NC}" >&2
            echo "$backup_file"
            return 0
        fi
    else
        echo -e "  Encryption disabled" >&2
    fi

    echo "$backup_file"
    return 0
}

# Function: Upload to rclone
upload_rclone() {
    local file="$1"
    local remote="$2"
    local path="$3"

    if ! command -v rclone &> /dev/null; then
        echo -e "${RED}rclone not installed!${NC}"
        return 1
    fi

    rclone copy "$file" "${remote}:${path}/" --progress
    return $?
}

# Function: Upload to S3
upload_s3() {
    local file="$1"
    local bucket="$2"
    local path="$3"

    if ! command -v aws &> /dev/null; then
        echo -e "${RED}AWS CLI not installed!${NC}"
        return 1
    fi

    local s3_path="s3://${bucket}/${path}/$(basename $file)"

    if [ -n "$S3_ENDPOINT_URL" ]; then
        aws s3 cp "$file" "$s3_path" --endpoint-url "$S3_ENDPOINT_URL"
    else
        aws s3 cp "$file" "$s3_path"
    fi

    return $?
}

# Function: Send Telegram notification
send_telegram() {
    local message="$1"

    if [ "$TELEGRAM_ENABLED" != "true" ] || [ -z "$TELEGRAM_BOT_TOKEN" ]; then
        return 0
    fi

    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d "chat_id=${TELEGRAM_CHAT_ID}" \
        -d "text=${message}" \
        -d "parse_mode=HTML" > /dev/null 2>&1
}

# Function: Cleanup old backups from remote
cleanup_old_backups() {
    local remote="$1"
    local path="$2"
    local retention_days="$3"
    local backup_type="$4"

    if [ "$backup_type" == "rclone" ]; then
        # Delete files older than retention days
        rclone delete "${remote}:${path}/" --min-age "${retention_days}d" 2>/dev/null
    elif [ "$backup_type" == "s3" ]; then
        # S3 lifecycle policy should handle this, but we can do manual cleanup
        # For now, skip (implement if needed)
        :
    fi
}

# Main backup function
backup_profile() {
    local profile_name="$1"
    local profile_dir="$PROFILES_DIR/$profile_name"

    if [ ! -d "$profile_dir" ]; then
        echo -e "${RED}Profile not found: $profile_name${NC}"
        return 1
    fi

    echo -e "${CYAN}Backing up profile: $profile_name${NC}"

    # Create backup
    local timestamp=$(date +%Y%m%d-%H%M%S)
    local backup_name="${profile_name}-${timestamp}"

    echo -e "${YELLOW}[1/5] Creating backup archive...${NC}"
    backup_file=$(create_backup "$profile_dir" "$backup_name")

    if [ -z "$backup_file" ]; then
        echo -e "${RED}Failed to create backup!${NC}"
        return 1
    fi

    # Encrypt (optional)
    echo -e "${YELLOW}[2/5] Encrypting backup...${NC}"
    backup_file=$(encrypt_backup "$backup_file")

    # Upload to primary
    if [ "$BACKUP_PRIMARY_ENABLED" == "true" ]; then
        echo -e "${YELLOW}[3/5] Uploading to primary (${BACKUP_PRIMARY_TYPE})...${NC}"

        if [ "$BACKUP_PRIMARY_TYPE" == "rclone" ]; then
            upload_rclone "$backup_file" "$BACKUP_PRIMARY_REMOTE" "$BACKUP_PRIMARY_PATH"
            primary_status=$?
        elif [ "$BACKUP_PRIMARY_TYPE" == "s3" ]; then
            upload_s3 "$backup_file" "$BACKUP_PRIMARY_REMOTE" "$BACKUP_PRIMARY_PATH"
            primary_status=$?
        fi

        if [ $primary_status -eq 0 ]; then
            echo -e "${GREEN}✓ Primary backup successful${NC}"
        else
            echo -e "${RED}✗ Primary backup failed${NC}"
        fi
    fi

    # Upload to secondary
    if [ "$BACKUP_SECONDARY_ENABLED" == "true" ]; then
        echo -e "${YELLOW}[4/5] Uploading to secondary (${BACKUP_SECONDARY_TYPE})...${NC}"

        if [ "$BACKUP_SECONDARY_TYPE" == "rclone" ]; then
            upload_rclone "$backup_file" "$BACKUP_SECONDARY_REMOTE" "$BACKUP_SECONDARY_PATH"
            secondary_status=$?
        elif [ "$BACKUP_SECONDARY_TYPE" == "s3" ]; then
            upload_s3 "$backup_file" "$BACKUP_SECONDARY_REMOTE" "$BACKUP_SECONDARY_PATH"
            secondary_status=$?
        fi

        if [ $secondary_status -eq 0 ]; then
            echo -e "${GREEN}✓ Secondary backup successful${NC}"
        else
            echo -e "${RED}✗ Secondary backup failed${NC}"
        fi
    fi

    # Cleanup
    echo -e "${YELLOW}[5/5] Cleaning up...${NC}"
    rm -f "$backup_file"

    # Cleanup old backups
    if [ "$BACKUP_PRIMARY_ENABLED" == "true" ]; then
        cleanup_old_backups "$BACKUP_PRIMARY_REMOTE" "$BACKUP_PRIMARY_PATH" "$BACKUP_PRIMARY_RETENTION_DAYS" "$BACKUP_PRIMARY_TYPE"
    fi

    if [ "$BACKUP_SECONDARY_ENABLED" == "true" ]; then
        cleanup_old_backups "$BACKUP_SECONDARY_REMOTE" "$BACKUP_SECONDARY_PATH" "$BACKUP_SECONDARY_RETENTION_DAYS" "$BACKUP_SECONDARY_TYPE"
    fi

    # Send notification
    local status_emoji="✅"
    [ $primary_status -ne 0 ] || [ $secondary_status -ne 0 ] && status_emoji="⚠️"

    send_telegram "<b>${status_emoji} Backup Completed</b>

Profile: $profile_name
Time: $(date '+%Y-%m-%d %H:%M:%S')
Primary: $([ $primary_status -eq 0 ] && echo '✅ Success' || echo '❌ Failed')
Secondary: $([ $secondary_status -eq 0 ] && echo '✅ Success' || echo '❌ Failed')
Size: $(du -h $backup_file 2>/dev/null | cut -f1 || echo 'N/A')"

    echo -e "${GREEN}Backup completed!${NC}"
    return 0
}

# Backup all profiles
backup_all_profiles() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║          BACKUP ALL PROFILES                         ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""

    local success_count=0
    local fail_count=0

    for profile_dir in $PROFILES_DIR/*/; do
        if [ -d "$profile_dir" ]; then
            profile_name=$(basename "$profile_dir")
            backup_profile "$profile_name"
            [ $? -eq 0 ] && ((success_count++)) || ((fail_count++))
            echo ""
        fi
    done

    echo -e "${GREEN}Backup Summary:${NC}"
    echo -e "  Success: ${GREEN}$success_count${NC}"
    echo -e "  Failed : ${RED}$fail_count${NC}"
}

# Global backup (system config + all profiles)
backup_global() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║          GLOBAL BACKUP                               ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""

    local timestamp=$(date +%Y%m%d-%H%M%S)
    local backup_name="global-backup-${timestamp}"

    echo -e "${YELLOW}Creating global backup...${NC}"
    backup_file=$(create_backup "$BASE_DIR" "$backup_name")

    if [ -z "$backup_file" ]; then
        echo -e "${RED}Failed to create global backup!${NC}"
        return 1
    fi

    backup_file=$(encrypt_backup "$backup_file")

    # Upload to both destinations
    if [ "$BACKUP_PRIMARY_ENABLED" == "true" ]; then
        echo -e "${YELLOW}Uploading to primary...${NC}"
        [ "$BACKUP_PRIMARY_TYPE" == "rclone" ] && upload_rclone "$backup_file" "$BACKUP_PRIMARY_REMOTE" "global" || upload_s3 "$backup_file" "$BACKUP_PRIMARY_REMOTE" "global"
    fi

    if [ "$BACKUP_SECONDARY_ENABLED" == "true" ]; then
        echo -e "${YELLOW}Uploading to secondary...${NC}"
        [ "$BACKUP_SECONDARY_TYPE" == "rclone" ] && upload_rclone "$backup_file" "$BACKUP_SECONDARY_REMOTE" "global" || upload_s3 "$backup_file" "$BACKUP_SECONDARY_REMOTE" "global"
    fi

    rm -f "$backup_file"

    echo -e "${GREEN}Global backup completed!${NC}"
}

# Main
case "$1" in
    profile)
        [ -z "$2" ] && { echo "Usage: $0 profile <profile-name>"; exit 1; }
        backup_profile "$2"
        ;;
    all)
        backup_all_profiles
        ;;
    global)
        backup_global
        ;;
    *)
        echo -e "${CYAN}Usage:${NC}"
        echo "  $0 profile <name>    - Backup specific profile"
        echo "  $0 all               - Backup all profiles"
        echo "  $0 global            - Backup entire system"
        ;;
esac
