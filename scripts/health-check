#!/bin/bash

##############################################
# VPN Multi-Profile System
# Health Check + Telegram Notification
##############################################

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURATION
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN="YOUR_BOT_TOKEN_HERE"
TELEGRAM_CHAT_ID="YOUR_CHAT_ID_HERE"

# Config file location
CONFIG_FILE="/opt/vpn-multi/health-check.conf"

# Load config if exists
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCTIONS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

send_telegram() {
    local message="$1"
    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d "chat_id=${TELEGRAM_CHAT_ID}" \
        -d "text=${message}" \
        -d "parse_mode=HTML" > /dev/null 2>&1
}

check_container_health() {
    local container_name="$1"
    local profile_name="$2"
    local domain="$3"

    # Check if container is running
    if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
        # Container is running

        # Check if Xray is running inside
        xray_status=$(docker exec $container_name pgrep -x xray 2>/dev/null)

        if [ -n "$xray_status" ]; then
            # VPN is UP
            return 0
        else
            # Container UP but VPN DOWN
            return 1
        fi
    else
        # Container is DOWN
        return 2
    fi
}

format_duration() {
    local seconds=$1
    local days=$((seconds / 86400))
    local hours=$(( (seconds % 86400) / 3600 ))
    local minutes=$(( (seconds % 3600) / 60 ))

    if [ $days -gt 0 ]; then
        echo "${days}d ${hours}h ${minutes}m"
    elif [ $hours -gt 0 ]; then
        echo "${hours}h ${minutes}m"
    else
        echo "${minutes}m"
    fi
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# MAIN HEALTH CHECK
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

BASE_DIR="/opt/vpn-multi"
PROFILES_DIR="$BASE_DIR/profiles"
STATE_DIR="$BASE_DIR/health-state"
LOG_FILE="$BASE_DIR/logs/health-check.log"

# Create state directory
mkdir -p "$STATE_DIR"

# Check if Telegram is configured
if [ "$TELEGRAM_BOT_TOKEN" == "YOUR_BOT_TOKEN_HERE" ] || [ -z "$TELEGRAM_BOT_TOKEN" ]; then
    echo "$(date): Telegram not configured. Skipping health check." >> "$LOG_FILE"
    exit 0
fi

echo "$(date): Starting health check..." >> "$LOG_FILE"

# Loop through all profiles
for profile_dir in $PROFILES_DIR/*/; do
    if [ ! -d "$profile_dir" ]; then
        continue
    fi

    profile_name=$(basename "$profile_dir")
    state_file="$STATE_DIR/${profile_name}.state"

    # Load profile config
    if [ ! -f "$profile_dir/profile.conf" ]; then
        continue
    fi

    source "$profile_dir/profile.conf"

    container_name="vpn-${PROFILE_NAME}"

    # Check health
    check_container_health "$container_name" "$PROFILE_NAME" "$DOMAIN"
    current_status=$?

    # Load previous state
    if [ -f "$state_file" ]; then
        source "$state_file"
    else
        # First run, initialize state
        echo "STATUS=0" > "$state_file"
        echo "DOWN_SINCE=0" > "$state_file"
        PREV_STATUS=0
        DOWN_SINCE=0
    fi

    # Status changed?
    if [ "$current_status" != "$PREV_STATUS" ]; then
        # Status CHANGED!

        if [ "$current_status" -eq 0 ]; then
            # NOW UP (was down before)

            # Calculate downtime
            if [ "$DOWN_SINCE" -gt 0 ]; then
                now=$(date +%s)
                downtime_seconds=$((now - DOWN_SINCE))
                downtime_formatted=$(format_duration $downtime_seconds)
            else
                downtime_formatted="Unknown"
            fi

            # Send Telegram notification
            message="<b>üü¢ VPN PROFILE UP</b>

<b>Profile:</b> ${PROFILE_NAME}
<b>Domain:</b> ${DOMAIN}
<b>Status:</b> ‚úÖ ONLINE
<b>Downtime:</b> ${downtime_formatted}
<b>Time:</b> $(date '+%Y-%m-%d %H:%M:%S')

The VPN service has recovered and is now operational."

            send_telegram "$message"
            echo "$(date): Profile $PROFILE_NAME is UP (was down for $downtime_formatted)" >> "$LOG_FILE"

            # Update state
            echo "STATUS=0" > "$state_file"
            echo "DOWN_SINCE=0" >> "$state_file"

        elif [ "$current_status" -eq 1 ]; then
            # NOW DOWN (VPN service failed, container still running)

            now=$(date +%s)

            # Send Telegram notification
            message="<b>üî¥ VPN SERVICE DOWN</b>

<b>Profile:</b> ${PROFILE_NAME}
<b>Domain:</b> ${DOMAIN}
<b>Status:</b> ‚ùå VPN SERVICE OFFLINE
<b>Container:</b> ‚úÖ Running
<b>Time:</b> $(date '+%Y-%m-%d %H:%M:%S')

The Xray VPN service has stopped but the container is still running.
Please check the service logs."

            send_telegram "$message"
            echo "$(date): Profile $PROFILE_NAME VPN service DOWN" >> "$LOG_FILE"

            # Update state
            echo "STATUS=1" > "$state_file"
            echo "DOWN_SINCE=$now" >> "$state_file"

        elif [ "$current_status" -eq 2 ]; then
            # NOW DOWN (container stopped)

            now=$(date +%s)

            # Send Telegram notification
            message="<b>üî¥ PROFILE COMPLETELY DOWN</b>

<b>Profile:</b> ${PROFILE_NAME}
<b>Domain:</b> ${DOMAIN}
<b>Status:</b> ‚ùå OFFLINE
<b>Container:</b> ‚ùå Stopped
<b>Time:</b> $(date '+%Y-%m-%d %H:%M:%S')

The entire profile container has stopped.
Please restart the container immediately."

            send_telegram "$message"
            echo "$(date): Profile $PROFILE_NAME container DOWN" >> "$LOG_FILE"

            # Update state
            echo "STATUS=2" > "$state_file"
            echo "DOWN_SINCE=$now" >> "$state_file"
        fi

    else
        # Status unchanged
        if [ "$current_status" -ne 0 ] && [ "$DOWN_SINCE" -gt 0 ]; then
            # Still down, check if we should send reminder (every 30 minutes)
            now=$(date +%s)
            downtime_seconds=$((now - DOWN_SINCE))

            # Send reminder every 30 minutes (1800 seconds)
            reminder_interval=$((downtime_seconds % 1800))
            if [ "$reminder_interval" -lt 300 ]; then  # within 5 minute window of 30 min mark
                downtime_formatted=$(format_duration $downtime_seconds)

                message="<b>‚ö†Ô∏è VPN PROFILE STILL DOWN</b>

<b>Profile:</b> ${PROFILE_NAME}
<b>Domain:</b> ${DOMAIN}
<b>Status:</b> ‚ùå OFFLINE
<b>Downtime:</b> ${downtime_formatted}
<b>Time:</b> $(date '+%Y-%m-%d %H:%M:%S')

The profile is still offline. Please investigate."

                send_telegram "$message"
                echo "$(date): Profile $PROFILE_NAME still down for $downtime_formatted (reminder sent)" >> "$LOG_FILE"
            fi
        fi
    fi
done

echo "$(date): Health check completed." >> "$LOG_FILE"
