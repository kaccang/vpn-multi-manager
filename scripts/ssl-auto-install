#!/bin/bash

##############################################
# SSL Certificate Auto Installation
# With Let's Encrypt Rate Limit Protection
##############################################

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

BASE_DIR="/opt/vpn-multi"
PROFILES_DIR="$BASE_DIR/profiles"
QUEUE_FILE="$BASE_DIR/.ssl_queue"
LOCK_FILE="$BASE_DIR/.ssl_lock"

# Check root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}Error: Must run as root!${NC}"
    exit 1
fi

# Check certbot installed
if ! command -v certbot &> /dev/null; then
    echo -e "${YELLOW}Installing certbot...${NC}"
    apt-get update -qq
    apt-get install -y certbot > /dev/null 2>&1
    echo -e "${GREEN}✓ Certbot installed${NC}"
fi

show_usage() {
    echo -e "${CYAN}SSL Auto Installation for VPN Profiles${NC}"
    echo ""
    echo "Usage:"
    echo "  $0 <profile-name>      - Install SSL for specific profile"
    echo "  $0 --all               - Install SSL for all profiles (with queue)"
    echo "  $0 --queue             - Process SSL queue (run by cron)"
    echo "  $0 --status            - Show queue status"
    echo ""
    echo "Examples:"
    echo "  $0 client1"
    echo "  $0 --all"
    exit 0
}

# Check if cert exists and valid
check_cert_valid() {
    local domain=$1
    local cert_path="/etc/letsencrypt/live/$domain/fullchain.pem"

    if [ ! -f "$cert_path" ]; then
        return 1  # Cert doesn't exist
    fi

    # Check expiry (valid if more than 30 days remaining)
    local expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
    local expiry_epoch=$(date -d "$expiry_date" +%s)
    local now_epoch=$(date +%s)
    local days_remaining=$(( ($expiry_epoch - $now_epoch) / 86400 ))

    if [ $days_remaining -gt 30 ]; then
        return 0  # Valid
    else
        return 1  # Expired or expiring soon
    fi
}

# Install SSL for single profile
install_ssl_single() {
    local profile_name=$1
    local profile_dir="$PROFILES_DIR/$profile_name"

    if [ ! -d "$profile_dir" ]; then
        echo -e "${RED}✗ Profile '$profile_name' not found!${NC}"
        return 1
    fi

    # Load profile config
    source "$profile_dir/profile.conf"

    echo -e "${CYAN}Installing SSL for: $DOMAIN${NC}"

    # Check if already valid
    if check_cert_valid "$DOMAIN"; then
        echo -e "${GREEN}✓ Valid certificate already exists (>30 days remaining)${NC}"

        # Copy to container anyway
        container_name="vpn-${profile_name}"
        if docker ps | grep -q "$container_name"; then
            docker exec $container_name mkdir -p /etc/letsencrypt/live/$DOMAIN/
            docker cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem $container_name:/etc/letsencrypt/live/$DOMAIN/
            docker cp /etc/letsencrypt/live/$DOMAIN/privkey.pem $container_name:/etc/letsencrypt/live/$DOMAIN/
            echo -e "${GREEN}✓ Certificate copied to container${NC}"
        fi
        return 0
    fi

    echo -e "${YELLOW}Requesting certificate from Let's Encrypt...${NC}"
    echo -e "${YELLOW}This may take 1-2 minutes...${NC}"

    # Request certificate (standalone mode, port 80)
    if certbot certonly --standalone --non-interactive --agree-tos \
        --register-unsafely-without-email \
        -d "$DOMAIN" \
        --http-01-port 80 2>/dev/null; then

        echo -e "${GREEN}✓ Certificate obtained successfully!${NC}"

        # Copy to container
        container_name="vpn-${profile_name}"
        if docker ps | grep -q "$container_name"; then
            docker exec $container_name mkdir -p /etc/letsencrypt/live/$DOMAIN/
            docker cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem $container_name:/etc/letsencrypt/live/$DOMAIN/
            docker cp /etc/letsencrypt/live/$DOMAIN/privkey.pem $container_name:/etc/letsencrypt/live/$DOMAIN/

            # Restart Xray
            docker exec $container_name bash -c "pkill -9 xray 2>/dev/null; sleep 1; /usr/local/bin/xray run -config /etc/xray/config.json &"

            echo -e "${GREEN}✓ Certificate installed to container${NC}"
        fi

        return 0
    else
        echo -e "${RED}✗ Failed to obtain certificate${NC}"
        echo -e "${YELLOW}Possible reasons:${NC}"
        echo "  - Domain not pointed to this server"
        echo "  - Port 80 blocked by firewall"
        echo "  - Rate limit reached (50 certs/week per domain)"
        return 1
    fi
}

# Add to queue
add_to_queue() {
    local profile_name=$1

    # Check if already in queue
    if [ -f "$QUEUE_FILE" ] && grep -q "^$profile_name$" "$QUEUE_FILE"; then
        echo -e "${YELLOW}⚠ Profile already in queue${NC}"
        return 0
    fi

    echo "$profile_name" >> "$QUEUE_FILE"
    echo -e "${GREEN}✓ Added to queue${NC}"
}

# Process queue (called by cron)
process_queue() {
    # Check lock file (prevent concurrent runs)
    if [ -f "$LOCK_FILE" ]; then
        echo -e "${YELLOW}Queue processor already running${NC}"
        exit 0
    fi

    touch "$LOCK_FILE"
    trap "rm -f $LOCK_FILE" EXIT

    if [ ! -f "$QUEUE_FILE" ] || [ ! -s "$QUEUE_FILE" ]; then
        echo "Queue is empty"
        exit 0
    fi

    echo -e "${CYAN}Processing SSL queue...${NC}"

    # Read first profile from queue
    local profile_name=$(head -n 1 "$QUEUE_FILE")

    if [ -z "$profile_name" ]; then
        rm -f "$QUEUE_FILE"
        exit 0
    fi

    echo -e "${CYAN}Processing: $profile_name${NC}"

    # Install SSL
    if install_ssl_single "$profile_name"; then
        echo -e "${GREEN}✓ Success${NC}"
    else
        echo -e "${RED}✗ Failed${NC}"
    fi

    # Remove from queue
    sed -i '1d' "$QUEUE_FILE"

    # Check if more in queue
    remaining=$(wc -l < "$QUEUE_FILE" 2>/dev/null || echo "0")
    if [ "$remaining" -gt 0 ]; then
        echo -e "${YELLOW}⚠ $remaining profiles remaining in queue${NC}"
        echo -e "${YELLOW}  Next will process in 3 minutes (rate limit protection)${NC}"
    else
        rm -f "$QUEUE_FILE"
        echo -e "${GREEN}✓ Queue completed!${NC}"
    fi
}

# Show queue status
show_queue_status() {
    echo -e "${CYAN}SSL Certificate Queue Status${NC}"
    echo ""

    if [ ! -f "$QUEUE_FILE" ] || [ ! -s "$QUEUE_FILE" ]; then
        echo -e "${GREEN}Queue is empty${NC}"
        exit 0
    fi

    echo "Profiles in queue:"
    cat -n "$QUEUE_FILE"
    echo ""
    echo -e "${YELLOW}Processing: 1 profile every 3 minutes${NC}"
    echo -e "${YELLOW}Estimated completion: $(( $(wc -l < "$QUEUE_FILE") * 3 )) minutes${NC}"
}

# Install for all profiles
install_all() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║     SSL INSTALLATION FOR ALL PROFILES                ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""

    # Count profiles
    profile_count=$(find "$PROFILES_DIR" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)

    if [ "$profile_count" -eq 0 ]; then
        echo -e "${YELLOW}No profiles found${NC}"
        exit 0
    fi

    echo -e "${YELLOW}Found $profile_count profiles${NC}"
    echo ""
    echo -e "${YELLOW}⚠️  Let's Encrypt Rate Limit: 50 certs/week per domain${NC}"
    echo -e "${YELLOW}⚠️  Processing with 3-minute delay between requests${NC}"
    echo ""

    read -p "Continue? [Y/N]: " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Cancelled"
        exit 0
    fi

    # Clear old queue
    rm -f "$QUEUE_FILE"

    # Add all to queue
    for profile_dir in "$PROFILES_DIR"/*/; do
        [ -d "$profile_dir" ] || continue
        profile_name=$(basename "$profile_dir")
        echo "$profile_name" >> "$QUEUE_FILE"
    done

    echo -e "${GREEN}✓ Added $profile_count profiles to queue${NC}"
    echo ""
    echo "Setting up cron job for processing..."

    # Setup cron job (every 3 minutes)
    cron_entry="*/3 * * * * /opt/vpn-multi/scripts/ssl-auto-install --queue >> /opt/vpn-multi/logs/ssl-queue.log 2>&1"

    # Remove old entry
    crontab -l 2>/dev/null | grep -v "ssl-auto-install --queue" > /tmp/cron-new

    # Add new entry
    echo "$cron_entry" >> /tmp/cron-new
    crontab /tmp/cron-new
    rm /tmp/cron-new

    echo -e "${GREEN}✓ Cron job installed${NC}"
    echo ""
    echo "Processing started! Monitor with:"
    echo "  $0 --status"
    echo "  tail -f /opt/vpn-multi/logs/ssl-queue.log"
    echo ""
    echo -e "${YELLOW}Estimated completion: $(( $profile_count * 3 )) minutes${NC}"
}

# Main logic
case "${1:-}" in
    --all)
        install_all
        ;;
    --queue)
        process_queue
        ;;
    --status)
        show_queue_status
        ;;
    -h|--help|"")
        show_usage
        ;;
    *)
        install_ssl_single "$1"
        ;;
esac
